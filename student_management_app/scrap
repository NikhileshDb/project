 if request.method != "POST":
        messages.error(request, "Invalid Method")
        return redirect('add_events')
    else:
        form = AddEventForm(request.POST, request.FILES)

        if form.is_valid():
            title = form.cleaned_data['title']
            content = form.cleaned_data['content']
            category = form.cleaned_data['category']
            status = form.cleaned_data['status']
            created_at = form.cleaned_data['created_at']

            # Getting featured_image first
            # First Check whether the file is selected or not
            # Upload only if file is selected
            if len(request.FILES) != 0:
                featured_image = request.FILES['featured_image']
                fs = FileSystemStorage()
                filename = fs.save(featured_image.name, featured_image)
                featured_image_url = fs.url(filename)
            else:
                featured_image_url = None


            try:
                event = Events(title=title, content=content, category=category,status=status,created_at=created_at,featured_image=featured_image_url )
                
                event.save()
                messages.success(request, "Events Added Successfully!")
                return redirect('add_events')
            except:
                messages.error(request, "Failed to Add Events!")
                return redirect('add_events')
        else:
            return redirect('add_events')




def edit_events_save(request):
    if request.method != "POST":
        messages.error(request, "Invalid Method")
        return redirect('/edit_events')
    else:
        event_id = request.POST.get('event_id')
        title = request.POST.get('title')
        category = request.POST.get('category')
        if len(request.FILES) != 0:
            if len(form.Featured_image) > 0:
                os.remove(form.featured_image.path)
                form.featured_image = request.POST['featured_image']
        content = request.POST.get('content')
        status = request.POST.get('status')
        try:
            event = Events.objects.get(id=event_id)
            event.title = title
            event.category = category
            event.featured_image = featured_image
            event.content = content
            event.status = status
            event.save()
            messages.success(request, "Event Updated Successfully.")
            return redirect('/edit_events/'+event_id)
        except:
            messages.error(request, "Failed to Update Event.")
            return redirect('/edit_events/'+event_id)





IMAGE_STATUS = (
    ('Featured',"Featured"),
    ('Not Featured',"Not Featured")
)

class HeroCarousalForm(forms.Form):
    alt_text = forms.CharField(label ="Alt Text", required=False, max_length=50, widget=forms.TextInput(attrs={"class":"form-control"}))
    carousal_image = forms.FileField(label="Banner",required=False, widget=FileInput(attrs={"class":"form-control"}))
    url_link = forms.URLField(label="Link URL",required=False, widget = forms.URLInput(attrs={"class":"form-control"}))
    status = forms.ChoiceField(label="Status",choices=IMAGE_STATUS, widget = forms.Select(attrs={"class":"form-control"}))
    caption = forms.CharField(label="Caption", required=False, widget=forms.TextInput(attrs={"class":"form-control"}))
    